AWSTemplateFormatVersion: 2010-09-09

Description: >-
              Create a VPC with Public Subnet connected to the Internet Gateway and Private Subnet connected to NAT Gateway
              Internet Gateway is attached to the VPC and Public Subnet is associated with the Route Table that has a route to the Internet Gateway
              NAT Gateway is created in the Public Subnet and Private Subnet is associated with the Route Table that has a route to the NAT Gateway

Parameters:
  VPCName:
    Description: This is Group03's VPC
    Type: String
    Default: VPC Group03

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicSubnet1:
      CIDR: 10.0.0.0/24
    PublicSubnet2:
      CIDR: 10.0.0.1/24
    PrivateSubnet1:
      CIDR: 10.0.0.2/24
    PrivateSubnet2:
      CIDR: 10.0.0.3/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true # Indicates whether the DNS resolution is supported for the VPC
      EnableDnsHostnames: true # Indicates whether the instances launched in the VPC get DNS hostnames
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref VPCName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub
        - ${AWS::Region}${AZ}
        - AZ: !Select 
          - 0
          - !GetAZs 
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicSubnet1
        - CIDR
      MapPublicIpOnLaunch: true # Indicates whether instances launched in this subnet receive a public IPv4 address
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join 
            - "-"
            - - !Ref VPCName
              - public
              - !Select 
                - 0
                - !GetAZs 

  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Sub
          - ${AWS::Region}${AZ}
          - AZ: !Select 
            - 1
            - !GetAZs 
        CidrBlock: !FindInMap 
          - SubnetConfig
          - PublicSubnet2
          - CIDR
        MapPublicIpOnLaunch: true # Indicates whether instances launched in this subnet receive a public IPv4 address
        Tags:
          - Key: Application
            Value: !Ref AWS::StackName
          - Key: Network
            Value: Public
          - Key: Name
            Value: !Join 
              - "-"
              - - !Ref VPCName
                - public
                - !Select 
                  - 1
                  - !GetAZs 

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub
        - ${AWS::Region}${AZ}
        - AZ: !Select
          - 0
          - !GetAZs
        CidrBlock: !FindInMap 
          - SubnetConfig
          - PrivateSubnet1
          - CIDR
        Tags:
          - Key: Application
            Value: !Ref AWS::StackName
          - Key: Network
            Value: Private
          - Key: Name
            Value: !Join 
              - "-"
              - - !Ref VPCName
                - private
                - !Select 
                  - 0
                  - !GetAZs
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub
        - ${AWS::Region}${AZ}
        - AZ: !Select
          - 1
          - !GetAZs
        CidrBlock: !FindInMap 
          - SubnetConfig
          - PrivateSubnet2
          - CIDR
        Tags:
          - Key: Application
            Value: !Ref AWS::StackName
          - Key: Network
            Value: Private
          - Key: Name
            Value: !Join 
              - "-"
              - - !Ref VPCName
                - private
                - !Select 
                  - 1
                  - !GetAZs

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join 
            - "-"
            - - !Ref VPCName
              - igw

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

Outputs:
  VPCId:
    Description: VPCId of VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-VPCId

  PublicSubnet1:
    Description: SubnetId of public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: SubnetId of public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: SubnetId of private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: SubnetId of private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateSubnet2

  DefaultSecurityGroup:
    Description: Default Security Group Id of the VPC
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup